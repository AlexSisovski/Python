# Задание 1. Проанализировать алгоритм.
#
# Возьмем задание с прошлого ДЗ
#
# В массиве найти максимальный отрицательный элемент.
# Вывести на экран его значение и позицию в массиве.
from random import sample

# Вопсользуемся четырмя вариантами алгоритма:
#   test1 - список с использованием встроенных функций
#   test2 - список без использования встроенных функций
#   test3 - кортеж с использованием встроенных функций
#   test4 - кортеж без использования встроенных функций

def test1():
    lst = sample(range(-1000000, 1000000), 100000)
    print('Mаксимальный отрицательный элементm:', min(lst))
    print('Положение данного элемента в списке:',lst.index(min(lst)))

def test2():
    lst = sample(range(-1000000, 1000000), 100000)
    i_min = 0
    for i in range(len(lst)):
        if lst[i] <= lst[i_min]:
            i_min = i
    print('Значение элемента:', lst[i_min])
    print('Позиция элемента вмассиве:', i_min)

def test3():
    lst = sample(range(-1000000, 1000000), 100000)
    tuple(lst)
    print('Mаксимальный отрицательный элементm:', min(lst))
    print('Положение данного элемента в списке:',lst.index(min(lst)))
    
def test4():
    lst = sample(range(-1000000, 1000000), 100000)
    tuple(lst)
    i_min = 0
    for i in range(len(lst)):
        if lst[i] <= lst[i_min]:
            i_min = i   
    print('Значение элемента:', lst[i_min])
    print('Позиция элемента вмассиве:', i_min)
    

# ОЦЕНКА РАБОТЫ АЛГОРИТМА
# Используем cProfile:
import cProfile
cProfile.run('test1()') # список с использованием встроенных функций
cProfile.run('test2()') # список без использования встроенных функций
cProfile.run('test3()') # кортеж с использованием встроенных функций
cProfile.run('test4()') # кортеж без использования встроенных функций

# На небольших объемах данных картина следующая.
# РЕЗУЛЬТАТЫ ЧЕТЫРЕХ ЗАМЕРОВ:
#------------------------
# круг|алгоритм|время, мс
#------------------------
#   1.  test1    0.028
#   1.  test2    0.041
#   1.  test3    0.043
#   1.  test4    0.032
#------------------------
#   2.  test1    0.026
#   2.  test2    0.038
#   2.  test3    0.040
#   2.  test4    0.034
#------------------------
#   3.  test1    0.030
#   3.  test2    0.036
#   3.  test3    0.035
#   3.  test4    0.032
#------------------------
#   4.  test1    0.028
#   4.  test2    0.037
#   4.  test3    0.033
#   4.  test4    0.032
#------------------------


# На бОльших объемах ситуация интереснее.
# РЕЗУЛЬТАТЫ ДВУХ ЗАМЕРОВ:
#------------------------
# круг|алгоритм|время, мс
#------------------------
#   1.  test1    1.605
#   1.  test2    1.675
#   1.  test3    1.632
#   1.  test4    1.615
#------------------------
#   2.  test1    1.588
#   2.  test2    1.666
#   2.  test3    1.640
#   2.  test4    1.706
#------------------------

# Лучше всего себя показывает список со встроенными методами.
