# Учебный курс: алгоритм и структуры данных на Python
# Домашнее задание к уроку 2
# Александр Сысовский
# _______________________________________________________________________________
# Задание 3.
# Сформировать из введенного числа обратное по порядку входящих в него цифр.
# Вывести на экран.
n = input('Введите число: ')
print('Обратное число:', int(n[::-1]))

# _______________________________________________________________________________
# Задание 4.
# Найти сумму n элементов последовательности.
# Количество элементов вводится с клавиатуры.
#
# При решение используем генератор случайных чисел
from random import randrange

# ВАРИАНТ РЕАЛИЗАЦИИ ЧЕРЕЗ ГЕНЕРАТОР FOR:
n = int(input('Введите количество элементов последовательности: '))
m = 0
for i in range(0, n):
    m += randrange(1, 200)
print('Сумма элементов последовательности:', m)

# ВАРИАНТ РЕАЛИЗАЦИИ С ПОМОЩЬЮ ФУНКЦИИ:
def sum_num(n):
    m = 0
    while n != 0:
        m += randrange(1, 200)
        n -= 1# sum_num(n-1, m)
    return m

n = int(input('Введите количество элементов последовательности: '))
print('Сумма элементов последовательности:', sum_num(n))

# ВАРИАНТ РЕАЛИЗАЦИИ ЧЕРЕЗ РЕКУРСИЮ:
def sum_num(n, m = 0):
    while n != 0:
        m += randrange(1, 200)
        return sum_num(n - 1, m)
    return m

n = int(input('Введите количество элементов последовательности: '))
print('Сумма элементов последовательности:', sum_num(n))


# _______________________________________________________________________________
# Задание 5.
# Коды таблицы ASCII c 32 по 27.
# Вывести на экран по десять пар "код-символ".
# 
# Попробуем разные варианты алгоритмов.

# Для красивого вывода в табличный вид
# воспользуемся сторонним модулем prettytable
# https://pypi.python.org/packages/source/P/PrettyTable/prettytable-0.7.2.tar.bz2

from prettytable import PrettyTable

# 1 ВАРИАНТ РЕАЛИЗАЦИИ:
def get_table(r_in, r_out):
    tb = PrettyTable(['Код', 'Символ'])
    for i in range(r_in, r_out):    
        tb.add_row([i, chr(i)]
    return tb
    
rng = [32, 42, 52, 62, 72, 82, 92, 102, 112, 122, 128] #диапазоны вывода
for i in range(1, len(rng)):
    table = get_table(rng[i-1], rng[i])
    print(table)

# 2 ВАРИАНТ РЕАЛИЗАЦИИ:
def get_table(n = 32, m = 42):
    while m < 129:
        tb = PrettyTable(['Код', 'Символ'])    
        for i in range(n, m):
            tb.add_row([i, chr(i)])
        print(tb)
        n += 10
        if n == 122:
            m = 128
        else:
            m += 10
    return tb
    
res = get_table()

    
# _______________________________________________________________________________
# Задание 6.
# Генерируется число от 0 до 100
# Пользователь должен отгадать его не более, чем за 10 попыток.

# ВАРИАНТ РЕАЛИЗАЦИИ ТОЛЬКО ЧЕРЕЗ ЦИКЛ:
from random import randint

print('ИГРА "УГАДАЙ ЧИСЛО".\n\nКомпьютер загадал число от 0 до 100')
number = randint(0, 100)
# print(number)
i = 1
answer = 101
while i < 11:
    answer = int(input('\nПопытка {}. Введите число: '.format(i)))
    if answer != number:
        if i == 10:
            print('\nВы исчерпали количество попыток! ', 
                'Комьютер загадал число ', number, '.')
        else:
            if answer < number:
                print('\nЗагаданное число больше введенного.')
            else:
                print('\nЗагаданное число меньше введенного.')            
            print('Вы не угадали, попробуйте еще раз.')
    else:
        print('\nПОЗДРАВЛЯЕМ! ВЫ ВЫИГРАЛИ!')
        break
    i += 1
print('\nИГРА ОКОНЧЕНА!')

# ВАРИАНТ РЕАЛИЗАЦИИ С ПОМОЩЬЮ ФУНКЦИИ:
from random import randint

def check_number(answ, numb, i):
    if i == 10:
        res = 'Вы исчерпали количество попыток! Загаданное число: ' + str(numb)
    else:
        if answ < numb:
            res = '\nЗагаданное число больше введенного. '
        else:
            res = '\nЗагаданное число меньше введенного. '
        res = res + '\nВы не угадали, попробуйте еще раз.'
    return res
    
print('ИГРА "УГАДАЙ ЧИСЛО".\n\nКомпьютер загадал число от 0 до 100')
number = randint(0, 100)

i = 1
answer = 101
while i < 11:
    answer = int(input('\nПопытка {}. Введите число: '.format(i)))
    if answer == number:
        print('\nПОЗДРАВЛЯЕМ! ВЫ ВЫИГРАЛИ!')
        break
    else:
        result = check_number(answer, number, i)
        print(result)
    i += 1
print('\nИГРА ОКОНЧЕНА!')

# _______________________________________________________________________________
# Задание 8.
# Посчитать, сколько раз встречается определенная цифра
# в введенной последовательности чисел. Количество вводимых чисел
# и цифра, которую необходимо посчитать, задаются вводом с клавиатуры.

from random import randrange

n = int(input('Введите количество чисел: '))
m = int(input('Введите цифру, которую необходимо посчитать: '))

list = []
for i in range(0, n):
    list.append(randrange(0, n))

i = 0
for elem in list:
    if elem == m:
        i += 1

print('Число {} встречается {} раз(а).'.format(m, i))

# _______________________________________________________________________________
# Задание 9.
# Среди натуральных чисел, которые были введены, найти наибольшее по сумме цифр.
# Вывести это число и сумму его цифр.
#
# Для облегчения ввода натуральных цифр используем генератор случайных чисел
# в определенном диапазоне.
from random import sample

num_list = sample(range(0, 50), 10)
print('Последовательность натуральных чисел:\n', num_list)

m = 0
n = 0
for elem in num_list:
    sum_num = elem % 10 + elem // 10
    if sum_num > m:
        m = sum_num
        n = elem
        
print('Наибольшее по сумме цифр число: {}.\n'
    'Сумма его чисел равна {}.'.format(n, m))
# _______________________________________________________________________________

